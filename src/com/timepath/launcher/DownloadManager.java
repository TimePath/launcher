package com.timepath.launcher;

import com.timepath.swing.table.ObjectBasedTableModel;
import java.io.*;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLConnection;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author TimePath
 */
@SuppressWarnings("serial")
public class DownloadManager extends JPanel {

    private static final Logger LOG = Logger.getLogger(DownloadManager.class.getName());

    private static class DownloadThread implements Runnable {

        private final Downloadable d;

        private final ObjectBasedTableModel<Downloadable> m;

        private DownloadThread(ObjectBasedTableModel<Downloadable> m, Downloadable d) {
            this.m = m;
            this.d = d;
        }

        public void run() {
            InputStream is = null;
            String[] dl = {d.downloadURL, d.versionURL};
            try {
                for(String s : dl) {
                    URL u = new URI(s).toURL();
                    File f;
                    if(s == dl[0]) {
                        f = d.file();
                    } else {
                        f = d.versionFile();
                    }
                    if(f == null) {
                        f = new File(Downloadable.PROGRAM_DIRECTORY, Downloadable.name(u));
                    }
                    URLConnection c = u.openConnection();
                    String len = c.getHeaderField("content-length");
                    long size = -1;
                    try {
                        size = Long.parseLong(len);
                    } catch(Exception e) {
                    }
                    d.size = size;
                    LOG.log(Level.INFO, "Downloading {0} > {1}", new Object[] {u, f});
                    f.mkdirs();
                    f.delete();
                    f.createNewFile();
                    byte[] buffer = new byte[8192];
                    is = new BufferedInputStream(c.getInputStream(), buffer.length);

                    OutputStream fos = new BufferedOutputStream(new FileOutputStream(f),
                                                                buffer.length);
                    int read;
                    long total = 0;
                    while((read = is.read(buffer)) > -1) {
                        fos.write(buffer, 0, read);
                        total += read;
                        d.progress = total;
                        m.update(d);
                    }
                    fos.flush();
                    fos.close();
                }
            } catch(IOException ex) {
                LOG.log(Level.SEVERE, null, ex);
            } catch(URISyntaxException ex) {
                LOG.log(Level.SEVERE, null, ex);
            } finally {
                if(is != null) {
                    try {
                        is.close();
                    } catch(IOException ex) {
                        LOG.log(Level.SEVERE, null, ex);
                    }
                }
            }
        }

    }

    public Future<?> submit(Downloadable d) {
        tableModel.add(d);
        return pool.submit(new DownloadThread(tableModel, d));
    }

    public void shutdown() {
        pool.shutdown();
    }

    ExecutorService pool = Executors.newCachedThreadPool();

    ObjectBasedTableModel<Downloadable> tableModel;

    public DownloadManager() {
        initComponents();
        DefaultTableModel m;
        tableModel = new ObjectBasedTableModel<Downloadable>() {
            @Override
            public String[] columns() {
                return new String[] {"Name", "Progress"};
            }

            @Override
            public Object get(Downloadable o, int columnIndex) {
                switch(columnIndex) {
                    case 0:
                        return o.fileName();
                    case 1:
                        float percent = (o.progress * 100) / o.size;
                        return (percent >= 0 ? percent + "%" : '?');
                    case 2:
                        return o.size;
                    default:
                        return null;
                }
            }
        };
        jTable1.setModel(tableModel);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

}
